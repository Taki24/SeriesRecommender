{"version":3,"sources":["Card.jsx","DisplayShow.jsx","YourList.jsx","Series.jsx","LoadData.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","className","this","props","show","getTitle","src","getImage","alt","onClick","window","open","getLink","getYear","getRating","React","Component","DisplayShow","state","key","buttons","document","getElementsByClassName","button","addEventListener","classList","add","id","action","setState","YourList","list","loading","idList","MakeOffer","datas","makeOffer","setTimeout","cards","push","length","likedShows","oneLimit","Math","round","result","ids","searchForSimiliars","Array","from","Set","category","year","rating","resultList","tvShow","findCategory","findYear","findRating","limit","element","includes","map","e","getId","data","contains","getGenres","border","abs","Series","i","ended","handleClick","bind","prevState","rendering","LoadData","initialArr","series","initArr","fetch","then","response","json","Show","Position","Title","Genres","Year","Image","URL","title","genres","img","link","split","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.918e42a1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Card extends React.Component {\r\n\r\n   render(){\r\n      return (\r\n         <div className=\"card\">\r\n            <div className=\"title\">{this.props.show.getTitle}</div>\r\n            <img src={this.props.show.getImage} alt=\"\" onClick={() => {\r\n               window.open(this.props.show.getLink, \"_blank\");\r\n            }}/>\r\n            <div className=\"year\">{this.props.show.getYear}</div>\r\n            <div className=\"rating\">\r\n               {this.props.show.getRating}\r\n               <img src=\"icons/star.png\" className=\"rating-image\" alt=\"\"/>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nclass DisplayShow extends React.Component {\r\n\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n         key: 0\r\n      }\r\n   }\r\n\r\n   componentDidMount(){\r\n      const buttons = document.getElementsByClassName(\"like-button\");\r\n      for(let button of buttons){\r\n         button.addEventListener(\"click\", () => {\r\n            // button.style.animation = \"click 1s forward\";\r\n            button.classList.add(\"click-animation\");\r\n            if(button.id === \"like\")\r\n               this.props.action(this.props.show)\r\n            else\r\n               this.props.action(\"\");\r\n\r\n            if(this.props.id !== 19)\r\n               this.setState({key: this.props.id});\r\n         });\r\n         // button.classList.remove(\"click-animation\");\r\n      }\r\n   }\r\n\r\n   render(){\r\n      return (\r\n         <div className=\"display-show\">\r\n            <img className=\"like-button\" id=\"like\" src=\"icons/like.jpg\" alt=\"like\"/>\r\n            <div key={this.state.key}>\r\n               <Card show={this.props.show} />\r\n            </div>\r\n            <img className=\"like-button\" id=\"dislike\" src=\"icons/dislike.png\" alt=\"dislike\" />\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default DisplayShow\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nclass YourList extends React.Component {\r\n\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n         list: [],\r\n         loading: true\r\n      }\r\n   }\r\n\r\n   componentDidMount(){\r\n      let mf = new MakeOffer(this.props.datas, this.props.list);\r\n      const idList = mf.makeOffer();\r\n\r\n      setTimeout(() => {\r\n         this.setState({\r\n            list: idList,\r\n            loading: false\r\n         });\r\n      }, 500);\r\n   }\r\n\r\n   render(){\r\n      const cards = [];\r\n         for(let id of this.state.list){\r\n            cards.push(<Card key={id} show={this.props.datas[id-1]} />);\r\n         }\r\n\r\n      if(this.state.loading){\r\n         return (\r\n            <div>Loading...</div>\r\n         )\r\n      }\r\n      else {\r\n         if(this.props.list.length < 5)\r\n            return (\r\n               <div className=\"error-message\">Please like at least 5 Tv shows :)</div>\r\n            )\r\n         else {\r\n            return (\r\n               <div>\r\n                  <div className=\"list-title\">Our recommendation for you:</div>\r\n                  <div className=\"cards-container\">\r\n                     {cards}\r\n                  </div>\r\n               </div>\r\n            )\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\nclass MakeOffer {\r\n   /*\r\n   datas - a json file ami a sorozatokat tartalmazza\r\n   likedShows - az az x darab sorozat amit a felhasználó a program elején like-olt\r\n   oneLimit - egy sorozathoz hány hasonló sorozatot fogok eltárolni. Azért a 15-öt\r\n      osztom a darab számmal, majd kerekítem, mert ha utána ennek az eredményét\r\n      vissza szorzom a darab számmal, nagyjából 15 körüli értéket fogok kapni. És\r\n      ennyi sorozatot szeretnék ajánlani az adott felhasználónak.\r\n   */\r\n   constructor(datas, likedShows){\r\n      this.datas = datas;\r\n      this.likedShows = likedShows;\r\n      this.oneLimit = Math.round(15 / this.likedShows.length);\r\n   }\r\n\r\n   makeOffer(){\r\n      //ebbe a listába kerülnek az ajánlott sorozatok id-jai\r\n      const result = [];\r\n\r\n      //a ciklus minden kedvelt sorozathoz meghívja az ő hozzá hasonló\r\n      //sorozatokat kereső függvényt(this.searchForSimiliars())\r\n      for(let show of this.likedShows){\r\n         const ids = this.searchForSimiliars(show);\r\n         for(let id of ids)\r\n            result.push(id);\r\n      }\r\n\r\n      //ha esetleg egy sorozat többször szerepelne, kiszedjük a duplikátumait\r\n      return Array.from(new Set(result))\r\n   }\r\n\r\n   //a függvény a kapott sorozatra lefutatt három különböző metódust\r\n   //mindegyik a saját kategóriája alapján keresi a hasonló sorozatokat\r\n   searchForSimiliars(show){\r\n      const category = [];\r\n      const year = [];\r\n      const rating = [];\r\n      const resultList = [];\r\n\r\n      for(let tvShow of this.datas){\r\n         if(this.findCategory(show, tvShow))\r\n            category.push(tvShow);\r\n         if(this.findYear(show, tvShow, 10))\r\n            year.push(tvShow);\r\n         if(this.findRating(show, tvShow, 2))\r\n            rating.push(tvShow);\r\n      }\r\n      //miután a ciklus végzett három különböző listányi sorozatot kapunk\r\n\r\n      //a legjobb találatok számunkra amelyek mind a három listában szerepelnek\r\n      //ezen kívül azt is ellenőrzi, hogy olyan sorozatot ne ajánljunk amit\r\n      //az elején már kedvelt a felhasználó\r\n      //ezt figyeli a következő ciklus:\r\n      let limit = -1;\r\n      for(let element of rating){\r\n         if(limit < this.oneLimit &&\r\n            year.includes(element) &&\r\n            category.includes(element) &&\r\n            !this.likedShows.includes(element))\r\n            {\r\n               resultList.push(element);\r\n               limit++;\r\n            }\r\n      }\r\n      //az eredménylistánk mindegyik elemének az id-jával térünk vissza\r\n      return resultList.map(e => e.getId);\r\n   }\r\n\r\n   //a három kereső függvény:\r\n   //olyan sorozatokat keresünk, melyeknek kategóriája megegyezik\r\n   //a paraméterben megkapott sorozat valamely kategóriájával\r\n   findCategory(tvShow, data){\r\n      let contains = false;\r\n      for(let category of tvShow.getGenres){\r\n         if(data.getGenres.includes(category))\r\n            contains = true;\r\n      }\r\n      return contains ? true : false;\r\n   }\r\n\r\n   //olyan sorozatokat fog keresni, amelyeknek megjelenésük évszáma\r\n   //a kapott korláton(border) belül helyezkedik el\r\n   //a függvényt border=10-el hívom meg, ez azt jelenti, hogy +- 10 éves\r\n   //időintervallumban lesznek a jó találataink\r\n   findYear(tvShow, data, border){\r\n      if(Math.abs(data.getYear - tvShow.getYear) <= border)\r\n         return true;\r\n      return false;\r\n   }\r\n\r\n   //az előző függvényhez hasonlóan működik\r\n   //mindössze annyi a különbség, hogy itt az intervallum nem év,\r\n   //hanem a sorozat értékelési pontja\r\n   //a függvényt border=2-vel hívom meg, ez azt jelenti, hogy +- 2-vel térhet el\r\n   //az adott sorozat értékelése\r\n   findRating(tvShow, data, border){\r\n      if(Math.abs(data.getRating - tvShow.getRating) <= border)\r\n         return true;\r\n      return false;\r\n   }\r\n}\r\n\r\nexport default YourList\r\n","import React from 'react'\r\nimport DisplayShow from './DisplayShow'\r\nimport YourList from './YourList'\r\n\r\nclass Series extends React.Component {\r\n\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n         i: 0,\r\n         ended: false,\r\n         likedShows: []\r\n      }\r\n      this.handleClick = this.handleClick.bind(this);\r\n   }\r\n\r\n   handleClick(show){\r\n      if(show !== \"\"){\r\n         // console.log(show);\r\n         this.setState(prevState => {\r\n            return {\r\n               i: prevState.i + 1,\r\n               likedShows: [...prevState.likedShows, show]\r\n            }\r\n         });\r\n      }\r\n      else {\r\n         this.setState(prevState => {\r\n            return {\r\n               i: prevState.i + 1,\r\n            }\r\n         });\r\n      }\r\n      // console.log(this.state.likedShows.length)\r\n   }\r\n\r\n   rendering(){\r\n      if(this.state.i === 19)\r\n         return <YourList list={this.state.likedShows} datas={this.props.datas} />\r\n      else\r\n         return <DisplayShow id={this.state.i} show={this.props.data[this.state.i]} action={this.handleClick} />\r\n   }\r\n\r\n   render(){\r\n      return this.rendering()\r\n   }\r\n}\r\n\r\n\r\nexport default Series\r\n\r\n/*\r\nAction\r\n   Star trek    26\r\n   Game of Thrones    19\r\n\r\nCrime\r\n   Breaking bad    5\r\n   Columbo       47\r\n   The X files    12\r\n   The Sporanos    1\r\n\r\nComedy\r\n   Saturday night live    44\r\n   Friends             17\r\n   Sex and the city    32\r\n   The Simpsons       7\r\n\r\nDrama\r\n   The wire    4\r\n   Lost    23\r\n   Cheers    2\r\n   Mad men    6\r\n\r\nFamily\r\n   The Cosby show    16\r\n   The Andy Griffith show    45\r\n   The Muppet show    89\r\nconst ids = [89, 45, 16, 6, 2, 23, 4, 7, 32, 17, 44, 1, 12, 47, 5, 19, 26, 15, 21];\r\nMystery\r\n   Law or Order    15\r\n   Hill Street Blues    21\r\n\r\n----------------------------\r\n\r\n?Horror\r\n   Hannibal\r\n   The twilight zone\r\n*/\r\n","import React from 'react'\r\nimport Series from './Series'\r\n\r\n//https://www.imdb.com/list/ls081688950/\r\n\r\nclass LoadData extends React.Component {\r\n\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n         datas: [],\r\n         initialArr: [],\r\n         loading: true\r\n      }\r\n   }\r\n\r\n   //JSON file beolvasása, Show(egy tv sorozat) classokra bontása\r\n   //ezek után a jelenlegi osztály tárolja az összes sorozatot\r\n   //a this.state.datas adattagban\r\n   componentDidMount(){\r\n      let series = [];\r\n      let initArr = [];\r\n\r\n      fetch('datas.json')\r\n         .then(response => response.json())\r\n         .then(data => {\r\n            series = data.map(show => new Show (\r\n               show.Position,\r\n               show.Title,\r\n               show[\"IMDb Rating\"],\r\n               show.Genres,\r\n               show.Year,\r\n               show.Image,\r\n               show.URL\r\n            ));\r\n            // for(let show of series)\r\n            //       console.log(show);\r\n\r\n            const ids = [89, 45, 16, 6, 2, 23, 4, 7, 32, 17, 44, 1, 12, 47, 5, 19, 26, 15, 21];\r\n            // console.log(ids.length);\r\n            for(let id of ids)\r\n               initArr.push(series[id-1]);\r\n\r\n            this.setState({\r\n               datas: series,\r\n               initialArr: initArr,\r\n               loading: false\r\n            });\r\n         });\r\n   }\r\n\r\n   render(){\r\n      if(this.state.loading){\r\n         return (\r\n            <div>Loading...</div>\r\n         )\r\n      }\r\n      else {\r\n         return (\r\n            <div>\r\n               <Series data={this.state.initialArr} datas={this.state.datas} />\r\n            </div>\r\n         )\r\n      }\r\n   }\r\n}\r\n\r\n//egy sorozat osztálya\r\nclass Show {\r\n   constructor(id, title, rating, genres, year, img, link){\r\n      this.id = id;\r\n      this.title = title;\r\n      this.rating = rating;\r\n      this.year = year;\r\n      this.genres = genres.split(\", \");\r\n      this.img = img;\r\n      this.link = link;\r\n   }\r\n   get getId(){\r\n      return this.id;\r\n   }\r\n   get getTitle(){\r\n      return this.title;\r\n   }\r\n   get getRating(){\r\n      return this.rating;\r\n   }\r\n   get getGenres(){\r\n      return this.genres;\r\n   }\r\n   get getYear(){\r\n      return this.year;\r\n   }\r\n   get getImage(){\r\n      return this.img;\r\n   }\r\n   get getLink(){\r\n      return this.link;\r\n   }\r\n}\r\n\r\nexport default LoadData\r\n","import React from 'react'\nimport LoadData from './LoadData'\nimport './App.css';\n\nclass App extends React.Component {\n\n   render(){\n\n      return (\n         <div className=\"App\">\n            <LoadData />\n         </div>\n     )\n   }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}